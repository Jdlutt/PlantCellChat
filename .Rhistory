genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/osa/interaction.xlsx",sheet = 2)
View(genelist)
View(interaction)
c(unique(interaction$Ligand),unique(interaction$Receptor))
####
c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2))
c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
####
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
genes <- genes[!is.na(genes)]
genes <- genes[!is.na(genes)][-unique(interaction$Signal)]
unique(interaction$Signal
unique(interaction$Signal)
genes <- genes[!genes %in% unique(interaction$Signal)]
View(genelist)
genes %in% genelist$Gene_ID
genes
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genes %in% genelist$Gene_ID]
View(genelist)
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/osa/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/osa/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genes %in% genelist$Gene_ID]
genes %in% genelist$Gene_ID
View(interaction)
View(genelist)
genelist
interaction
genelist <- genelist %>%
rowwise() %>%
mutate(Type = {
# 初始化一个空的向量来存储匹配的类型
types <- c()
# 检查 Gene_ID 是否在 interaction 的各个列中
if (Gene_ID %in% interaction$Ligand) types <- c(types, "Ligand")
if (Gene_ID %in% interaction$Receptor) types <- c(types, "Receptor")
if (Gene_ID %in% interaction$Complex1 | Gene_ID %in% interaction$Complex2) types <- c(types, "Complex")
if (Gene_ID %in% interaction$Agonist) types <- c(types, "Agonist")
if (Gene_ID %in% interaction$Antagonist) types <- c(types, "Antagonist")
if (Gene_ID %in% interaction$CoAreceptor) types <- c(types, "CoAreceptor")
if (Gene_ID %in% interaction$CoIreceptor) types <- c(types, "CoIreceptor")
# 如果找到了匹配的类型，按顺序连接并用 "/" 分隔
if (length(types) > 0) {
paste(types, collapse = "/")
} else {
NA
}
}) %>%
ungroup()
library(tidyverse)
genelist <- genelist %>%
rowwise() %>%
mutate(Type = {
# 初始化一个空的向量来存储匹配的类型
types <- c()
# 检查 Gene_ID 是否在 interaction 的各个列中
if (Gene_ID %in% interaction$Ligand) types <- c(types, "Ligand")
if (Gene_ID %in% interaction$Receptor) types <- c(types, "Receptor")
if (Gene_ID %in% interaction$Complex1 | Gene_ID %in% interaction$Complex2) types <- c(types, "Complex")
if (Gene_ID %in% interaction$Agonist) types <- c(types, "Agonist")
if (Gene_ID %in% interaction$Antagonist) types <- c(types, "Antagonist")
if (Gene_ID %in% interaction$CoAreceptor) types <- c(types, "CoAreceptor")
if (Gene_ID %in% interaction$CoIreceptor) types <- c(types, "CoIreceptor")
# 如果找到了匹配的类型，按顺序连接并用 "/" 分隔
if (length(types) > 0) {
paste(types, collapse = "/")
} else {
NA
}
}) %>%
ungroup()
View(genelist)
View(genelist)
write_excel_csv(genelist, "D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/osa/genelist.csv")
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/ath/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/ath/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genes %in% genelist$Gene_ID]
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/sly/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/sly/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genelist <- genelist %>%
rowwise() %>%
mutate(Type = {
# 初始化一个空的向量来存储匹配的类型
types <- c()
# 检查 Gene_ID 是否在 interaction 的各个列中
if (Gene_ID %in% interaction$Ligand) types <- c(types, "Ligand")
if (Gene_ID %in% interaction$Receptor) types <- c(types, "Receptor")
if (Gene_ID %in% interaction$Complex1 | Gene_ID %in% interaction$Complex2) types <- c(types, "Complex")
if (Gene_ID %in% interaction$Agonist) types <- c(types, "Agonist")
if (Gene_ID %in% interaction$Antagonist) types <- c(types, "Antagonist")
if (Gene_ID %in% interaction$CoAreceptor) types <- c(types, "CoAreceptor")
if (Gene_ID %in% interaction$CoIreceptor) types <- c(types, "CoIreceptor")
# 如果找到了匹配的类型，按顺序连接并用 "/" 分隔
if (length(types) > 0) {
paste(types, collapse = "/")
} else {
NA
}
}) %>%
ungroup()
View(genelist)
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/zma/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/zma/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
View(genelist)
unique(genelist$Uniprotkb)
genes[!genes %in% genelist$Gene_ID]
# 提取FALSE的genes
genes[!genelist$Gene_ID %in% genes]
genes[!genelist$Gene_ID %in% genes]
View(interaction)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
genes <- genes[!is.na(genes)]
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
View(genelist)
View(genelist)
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genelist$Gene_ID %in% genes]
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
# 提取FALSE的genes
genes[!genelist$Gene_ID %in% genes]
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
# 提取FALSE的genes
genes[!genelist$Gene_ID %in% genes]
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genelist$Gene_ID %in% genes]
"GLYMA_20G228700" %in% genes
View(genelist)
View(interaction)
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/gmx/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
unique(interaction$Ligand)
"GLYMA_20G228700" %in% unique(interaction$Ligand)
unique(interaction$Signal)
genes <- genes[!is.na(genes)]
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes[!genelist$Gene_ID %in% genes]
genes %in% genelist$Gene_ID
genelist$Gene_ID %in% genes
genelist$Gene_ID %in% genes
# 提取FALSE的genes
genes[!genelist$Gene_ID %in% genes]
genes %in% genelist$Gene_ID
genes[!genes %in% genelist$Gene_ID]
View(interaction)
genelist$Gene_ID %in% genes
# 提取FALSE的genes
genes[!genelist$Gene_ID %in% genes]
interaction <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/ath/interaction.xlsx",sheet = 1)
genelist <- read_excel("D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/ath/interaction.xlsx",sheet = 2)
genes <- c(unique(interaction$Ligand),
unique(interaction$Receptor),
unique(interaction$Complex1),
unique(interaction$Complex2),
unique(interaction$Agonist),
unique(interaction$Antagonist),
unique(interaction$CoAreceptor),
unique(interaction$CoIreceptor))
# 过滤genes的NA值
genes <- genes[!is.na(genes)]
# 除去genes中unique(interaction$Signal)的字符
genes <- genes[!genes %in% unique(interaction$Signal)]
genes <- unique(genes)
genes %in% genelist$Gene_ID
genes[!genes %in% genelist$Gene_ID]
genelist <- genelist %>%
rowwise() %>%
mutate(Type = {
# 初始化一个空的向量来存储匹配的类型
types <- c()
# 检查 Gene_ID 是否在 interaction 的各个列中
if (Gene_ID %in% interaction$Ligand) types <- c(types, "Ligand")
if (Gene_ID %in% interaction$Receptor) types <- c(types, "Receptor")
if (Gene_ID %in% interaction$Complex1 | Gene_ID %in% interaction$Complex2) types <- c(types, "Complex")
if (Gene_ID %in% interaction$Agonist) types <- c(types, "Agonist")
if (Gene_ID %in% interaction$Antagonist) types <- c(types, "Antagonist")
if (Gene_ID %in% interaction$CoAreceptor) types <- c(types, "CoAreceptor")
if (Gene_ID %in% interaction$CoIreceptor) types <- c(types, "CoIreceptor")
# 如果找到了匹配的类型，按顺序连接并用 "/" 分隔
if (length(types) > 0) {
paste(types, collapse = "/")
} else {
NA
}
}) %>%
ungroup()
View(genelist)
write_excel_csv(genelist, "D:/BaiduSyncdisk/bio/20231228PlantCellChat/PlantCellChat/data/ath/genelist.csv")
idx %>%
mutate(Pairs = paste(Source, " - ", Target)) %>%
ggplot(aes(x = reorder(Pairs, Prob), y = Prob)) +
geom_bar(stat = "identity", fill = "#4682b4") + # 设置柱状图颜色
coord_flip() + # 翻转坐标轴
theme_bw() + # 设置白色背景
labs(
x = "Ligand-Receptor Pairs", # x轴标签
y = "Probability",          # y轴标签
title = "Signal Contribution by Ligand-Receptor Pairs" # 图标题
) +
theme(
axis.text.y = element_text(size = 10, color = "black"), # 设置y轴文字大小和颜色
axis.text.x = element_text(size = 10, color = "black"), # 设置x轴文字大小和颜色
plot.title = element_text(hjust = 0.5, size = 12, face = "bold") # 设置标题位置和样式
)
library(Augur)
devtools::document()
devtools::build()
library(PlantCellChat)
PlottingCommunNetwork(pccob_list[["Ctrl"]],ligand.type = "lrpairs",comm.pattern = "paracrine",key.signal = "ABA",key.cluster = "Mestome Sheath",input.color = color_list)
# 示例数据
df <- data.frame(
group = c(
"Os01g0583100 – Os05g0213500", "Os01g0583100 – Os03g0297600",
"Os01g0846300 – Os05g0213500", "Os03g0268600 – Os05g0213500",
"Os09g0325700 – Os05g0213500", "Os01g0583100 – Os10g0573400",
"Os01g0583100 – Os06g0562200", "Os01g0846300 – Os03g0297600",
"Os03g0268600 – Os03g0297600", "Os09g0325700 – Os03g0297600"
),
value1 = runif(10, 0, 5),  # 灰色条长度（随机数示例）
value2 = runif(10, 0, 5)   # 红色条长度（随机数示例）
)
library(ggplot2)
# 将数据转换为长格式
df_long <- reshape2::melt(df, id.vars = "group", variable.name = "type", value.name = "value")
# 绘制水平条形图
ggplot(df_long, aes(x = group, y = value, fill = type)) +
geom_bar(stat = "identity", position = "stack", width = 0.8) + # 绘制堆叠条形图
scale_fill_manual(values = c("value1" = "grey", "value2" = "red")) + # 自定义颜色
coord_flip() + # 翻转坐标轴，变成水平条形图
theme_minimal() +
theme(
axis.text.y = element_text(size = 8), # 调整y轴文字大小
axis.title = element_blank(),         # 去除轴标题
legend.position = "none"              # 隐藏图例
)
library(ggplot2)
# 调整数据：将灰色条长度设为负值，红色条为正值
df$value1 <- -df$value1  # 将灰色条长度设置为负值
# 绘制条形图
ggplot(df, aes(x = group)) +
geom_bar(aes(y = value1), stat = "identity", fill = "grey", width = 0.8) +  # 灰色条在左侧
geom_bar(aes(y = value2), stat = "identity", fill = "red", width = 0.8) +   # 红色条在右侧
coord_flip() +  # 水平翻转坐标轴
theme_minimal() +
theme(
axis.text.y = element_text(size = 8),   # 调整Y轴文字大小
axis.title.x = element_blank(),         # 去除X轴标题
axis.title.y = element_blank(),         # 去除Y轴标题
legend.position = "none"                # 隐藏图例
) +
labs(y = "Value", x = NULL)  # 添加Y轴标签
library(shiny)
library(shinythemes)
library(shiny)
library(shinythemes)
install.packages("shinythemes")
library(shiny)
library(shinythemes)
library(shinydashboard)
install.packages("shinydashboard")
library(shiny)
library(shinythemes)
library(shinydashboard)
ui <- fluidPage(
# 在标题栏上方插入动态生成的图片
imageOutput("headerImage", height = "auto"),
navbarPage(
theme = shinytheme("readable"),
"PlantCellChat",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
h3("Welcome to PlantCellChat!")
),
mainPanel()
)
),
tabPanel("Download"),
tabPanel("Search"),
tabPanel("Explore"),
tabPanel("Document"),
tabPanel("Contact")
)
)
server <- function(input, output, session) {
# 渲染顶部图片
output$headerImage <- renderImage({
list(src = "www/top_logo.png",
contentType = 'image/png',
width = "100%",  # 使用百分比以自适应宽度
height = "auto",
alt = "Header Image")
}, deleteFile = FALSE)
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(shinydashboard)
ui <- fluidPage(
# 在标题栏上方插入动态生成的图片
imageOutput("headerImage", height = "auto"),
navbarPage(
theme = shinytheme("readable"),
"PlantCellChat",
tabPanel("Home",
sidebarLayout(
sidebarPanel(
h3("Welcome to PlantCellChat!")
),
mainPanel()
)
),
tabPanel("Download"),
tabPanel("Search"),
tabPanel("Explore"),
tabPanel("Document"),
tabPanel("Contact")
)
)
server <- function(input, output, session) {
# 渲染顶部图片
output$headerImage <- renderImage({
list(src = "www/top_logo.png",
contentType = 'image/png',
width = "100%",  # 使用百分比以自适应宽度
height = "auto",
alt = "Header Image")
}, deleteFile = FALSE)
}
shinyApp(ui, server)
devtools::document()
devtools::build()
library(PlantCellChat)
devtools::check()
